================
Building the app
================

As you see, we have some css files, 
some asset files, we're going to delete most 
of this, and in our main.jsx we can remove the 
imported css at the top 

Then inside our App.jsx file, we're going to 
delete everything inside the main App func, and 
add our own functionality

=====================
IMPORTANT DISTINCTION
=====================

Inside react 'class' is reserved, if 
we want to add a class to jsx element, 
we instead use <form className="input-form"></form>
We need to use className instead of class 

Also important, we can only ever return one 
thing inside of a return App() func, one way 
around this is to wrap the entire html inside 
of a div, which will work

But a better way is to use a FRAGMENT, 
what is a fragment? 

Well a fragment is just an element that has no 
specified tag, it looks like this: 


export default function App(){
  return (
  <>
  <form className="add-item-form">
    <div className="row-form">
      <label htmlFor="item">My Items</label>
      <input type="text" id="item" />
    </div>
    <button className="btn">Add Item</button>
  </form>
  <h1 className="h1">My To-Do List</h1>
  </>
  )
}

So as we see, after the return keyword, we add 
a '()' to wrap the whole thing inside, then below 
use <>, with nothing inside, and at the bottom 
before the ending '()' we close the fragment </>

Both wrapping your JSX elements 
in a <div> and using a fragment <></> 
achieve the same result of allowing you
 to render multiple elements within a 
 single parent element. However, there
  are some differences between the 
  two approaches that can make one
   better than the other depending
    on the situation.

Here are some considerations
 when choosing between the two:

Styling: If you wrap your
 JSX elements in a <div>,
  it will create an additional
   DOM element that may affect 
   the styling of your components. 
   
   If this is not an issue, then 
   wrapping your JSX elements in a 
   <div> is perfectly fine. But if 
   you want to avoid adding an extra 
   layer of DOM elements, you can use
    a fragment <></> instead.

Accessibility: If you wrap your 
JSX elements in a <div>, it may
 affect the accessibility of your 
 components. For example, 
 if you are using a screen reader, 
 it may read out the additional <div>
  element as an extra level of nesting. 
  In this case, using a fragment <></>
   can help improve the accessibility 
   of your components.

Cleanliness: If you have a large 
amount of JSX elements that you want
 to render, wrapping them all in a 
 <div> can make your code less clean 
 and organized. Using a fragment <></>
  can help keep your code more concise
   and readable.

In summary, the decision to use
 a <div> or a fragment <></> 
 ultimately depends on the specific
  needs of your application. 
  
  If you don't mind an extra DOM 
  element and you don't need to
   optimize for accessibility or 
   cleanliness, a <div> is perfectly fine.
   
    But if you want to avoid an extra DOM
     element or optimize for accessibility
      and cleanliness, a fragment <></> is a
       good choice.



==================================
What we want the site to look like
==================================

As it stands, right now, we have what 
we want the site to look like, we don't 
have the functionality to render items 
to the dom onclick for the button, extracting 
the text from the input field and adding it 
to the page, nor do we have the delete functionality
in place yet

BUT this is good, this is a declarative approach 
to building a website, we know what our site
looks like, we know what the functionality should 
be, now we take the steps to implement 
the functionality to complete our site 